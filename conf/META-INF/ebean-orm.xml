<?xml version="1.0" encoding="UTF-8"?>
<entity-mappings>
    <entity class="models.GeoJsonModel">
    	<raw-sql name="show">
    		 <columnMapping column="features" property="featuresString" />
    		<query>
    			SELECT type, features
				FROM (
					WITH RECURSIVE ancetres as  (

						SELECT cd_taxsup, cd_nom, lb_nom, rang
						FROM inpn.taxref_v8
						where cd_nom = :id

						UNION

						SELECT inpn.taxref_v8.cd_taxsup, inpn.taxref_v8.cd_nom, inpn.taxref_v8.lb_nom , inpn.taxref_v8.rang
						FROM inpn.taxref_v8 
						JOIN ancetres a
						ON inpn.taxref_v8.cd_taxsup = a.cd_nom

					), data as (

						SELECT cd_nom, obs.geometrie, id_obs
						FROM ancetres a
						JOIN saisie.saisie_observation obs
						using (cd_nom)
						group by cd_nom, obs.geometrie, id_obs

					), grid as (

						select g.geometrie
						from export.grille_10km g
						join ign_geofla.commune c
						on st_intersects(c.geometrie, g.geometrie)
						where code_reg = '91'
						group by g.geometrie

					), feature as (

						SELECT 'Feature' AS type
						, row_to_json((SELECT ct FROM (SELECT count(id_obs) AS nombres) AS ct)) AS properties
						, cast(ST_AsGeoJson(st_transform(g.geometrie, 4326)) as json) AS geometry
						FROM grid g
						left JOIN data obs
						ON st_intersects(obs.geometrie, g.geometrie)
						group by g.geometrie
					)

					SELECT 'FeatureCollection' as type
					, array_to_json(array_agg(feature)) as features
					from feature
				) as geojson
    		</query>
    	</raw-sql>
    </entity>
    <entity class="models.InformationsModel">
    	<raw-sql name="show">
    		<columnMapping column="cd_nom" property="id" />
    		<columnMapping column="cd_taxsup" property="taxsup" />
    		<columnMapping column="lb_nom" property="nom" />
    		<columnMapping column="nom_vern" property="nomVern" />
    		<columnMapping column="synonimes" property="synonimesString" />
    		<query>
    			SELECT cd_nom, cd_taxsup, nom_vern, lb_nom, rang, ordre, phylum, classe, famille, observations, especes, communes, synonimes
				FROM (
					WITH RECURSIVE fils as  (
	
     				SELECT cd_taxsup, cd_nom, cd_ref AS aïeul
     				FROM inpn.taxref_v8
     				where cd_nom = :id

     				UNION

     				SELECT syn.cd_taxsup, syn.cd_nom, syn.cd_ref AS aïeul
     				FROM inpn.taxref_v8 tax join inpn.taxref_v8 syn USING(cd_ref)
     				where tax.cd_nom = :id

     				UNION

     				SELECT tax.cd_taxsup, tax.cd_nom, f.aïeul
    				FROM inpn.taxref_v8 tax
     				JOIN fils f
     				ON tax.cd_taxsup = f.cd_nom

				), data as (

     				SELECT count(id_obs) as observations, count(distinct cd_nom) as especes, count(distinct code_insee) as communes, aïeul
     				from fils f join saisie.saisie_observation using(cd_nom)
     				GROUP BY aïeul

				), info as (

					SELECT ref.cd_taxsup, ref.cd_nom, ref.nom_vern, ref.lb_nom, ref.rang, ref.ordre, ref.phylum, ref.classe, ref.famille
					, array_to_json(
						array_agg(
							row_to_json((
								SELECT syn FROM (SELECT syn.cd_nom, syn.nom_complet) as syn
     		  		)))) as synonimes
     				FROM inpn.taxref_v8 ref join inpn.taxref_v8 syn on syn.cd_ref = ref.cd_nom
     				where ref.cd_nom = :id
     				GROUP BY ref.cd_taxsup, ref.cd_nom, ref.lb_nom, ref.rang, ref.ordre, ref.phylum, ref.classe, ref.famille, ref.nom_vern
 				)
 				select cd_nom, cd_taxsup, nom_vern, lb_nom, rang, ordre, phylum, classe, famille, observations, especes, communes, synonimes 
 				from data JOIN info ON info.cd_nom = aïeul
 				) as info
 			</query>
    	</raw-sql>
    </entity>
</entity-mappings>