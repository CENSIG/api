<?xml version="1.0" encoding="UTF-8"?>
<entity-mappings>
    <entity class="models.GeoJsonModel">
    	<raw-sql name="show">
    		 <columnMapping column="features" property="featuresString" />
    		<query>
    			SELECT type, features
				FROM (
					WITH RECURSIVE ancetres as  (

						SELECT cd_taxsup, cd_nom, cd_ref as aïeul, lb_nom					
						FROM inpn.taxref_v8
						where cd_nom = :id

						UNION

						SELECT syn.cd_taxsup, syn.cd_nom, syn.cd_ref AS aïeul, syn.lb_nom
						FROM inpn.taxref_v8 tax join inpn.taxref_v8 syn USING(cd_ref)
						where tax.cd_nom = :id

						UNION

						SELECT tax.cd_taxsup, tax.cd_nom, f.aïeul, f.lb_nom
						FROM inpn.taxref_v8 tax
						JOIN ancetres f
						ON tax.cd_taxsup = f.cd_nom

					), data as (

						SELECT cd_nom, obs.geometrie, id_obs
						FROM ancetres a
						JOIN saisie.saisie_observation obs
						using (cd_nom)
						group by cd_nom, obs.geometrie, id_obs
						
					), grid as (

						select g.geometrie
						from export.grille_10km g
						join ign_geofla.commune c
						on st_intersects(c.geometrie, g.geometrie)
						where code_reg = '91'
						group by g.geometrie

					), feature as (

						SELECT 'Feature' AS type
						, row_to_json((SELECT ct FROM (SELECT count(id_obs) AS nombres) AS ct)) AS properties
						, cast(ST_AsGeoJson(st_transform(g.geometrie, 4326)) as json) AS geometry
						FROM grid g
						left JOIN data obs
						ON st_intersects(obs.geometrie, g.geometrie)
						group by g.geometrie
					)
				
					SELECT 'FeatureCollection' as type
					, array_to_json(array_agg(feature)) as features
					from feature
				) as geojson
    		</query>
    	</raw-sql>
    </entity>
    <entity class="models.InformationsModel">
    	<raw-sql name="show">
    		<columnMapping column="cd_nom" property="id" />
    		<columnMapping column="cd_taxsup" property="taxsup" />
    		<columnMapping column="lb_nom" property="nom" />
    		<columnMapping column="nom_vern" property="nomVern" />
    		<query>
    			SELECT cd_taxsup, cd_nom, nom_vern, lb_nom, rang, ordre, phylum, 
				       classe, famille, observations, especes, communes, observateurs
				FROM (
					WITH RECURSIVE fils as  (
	
     					SELECT cd_taxsup, cd_nom, cd_ref AS taxonref
     					FROM inpn.taxref_v8
     					where cd_nom = :id

     					UNION

     					SELECT syn.cd_taxsup, syn.cd_nom, syn.cd_ref AS taxonref
     					FROM inpn.taxref_v8 tax join inpn.taxref_v8 syn USING(cd_ref)
     					where tax.cd_nom = :id

     					UNION

     					SELECT tax.cd_taxsup, tax.cd_nom, f.taxonref
    					FROM inpn.taxref_v8 tax
     					JOIN fils f
     					ON tax.cd_taxsup = f.cd_nom

					), data as (

						SELECT count(id_obs) as observations, count(distinct cd_nom) as especes, count(distinct code_insee) as communes, 
					  		   count(distinct observateur) as observateurs, taxonref
						from fils f join saisie.saisie_observation using(cd_nom)
						GROUP BY taxonref

					), info as (

						SELECT cd_taxsup, cd_nom, nom_vern, lb_nom, rang, ordre, phylum, 
				       		   classe, famille, observations, especes, communes, observateurs
     					FROM inpn.taxref_v8 i join data on cd_ref = data.taxonref
     					where i.cd_nom = data.taxonref
     					GROUP BY cd_taxsup, cd_ref, cd_nom, lb_nom, rang, ordre, phylum, classe, famille, nom_vern,
     							 observations, especes, communes, observateurs
 					)
 					select * from info
				) as info
 			</query>
    	</raw-sql>
    </entity>
    <entity class="models.ParentsModel">
    	<raw-sql name="show">
    		<columnMapping column="cd_nom" property="cdnom" />
    		<columnMapping column="lb_nom" property="name" />
    		<query>
    			SELECT cd_nom, lb_nom, rang
				FROM (
					WITH RECURSIVE parents as  (

						SELECT cd_taxsup, cd_nom, lb_nom, rang, cast(0 as bigint) as ordre
						FROM inpn.taxref_v8
						where cd_nom = :id

						UNION

						SELECT i.cd_taxsup, i.cd_nom, i.lb_nom, i.rang, a.ordre + 1
						FROM inpn.taxref_v8 i
						JOIN parents a
						ON i.cd_nom = a.cd_taxsup
						WHERE i.rang != :limit
					)

					select cd_nom, lb_nom, rang from parents order by ordre desc
				) as parents
    		</query>
    	</raw-sql>
    </entity>
    <entity class="models.ChildsModel">
    	<raw-sql name="show">
    		<columnMapping column="cd_nom" property="cdnom" />
    		<columnMapping column="lb_nom" property="name" />
    		<columnMapping column="cd_ref" property="cdref" />
    		<columnMapping column="nom_valide" property="nameRef" />
    		<query>
    			SELECT cd_nom, isref, lb_nom, observations, cd_ref, nom_valide
				FROM (
					WITH RECURSIVE ancetres as  (

						SELECT cd_taxsup, cd_ref, cd_nom, lb_nom, rang, nom_valide
						FROM inpn.taxref_v8
						where cd_nom = :id

						UNION

						SELECT inpn.taxref_v8.cd_taxsup, inpn.taxref_v8.cd_ref, inpn.taxref_v8.cd_nom, inpn.taxref_v8.lb_nom , inpn.taxref_v8.rang, inpn.taxref_v8.nom_valide
						FROM inpn.taxref_v8 
						JOIN ancetres a
						ON inpn.taxref_v8.cd_taxsup = a.cd_nom
					)

					select a.cd_nom, a.cd_ref=a.cd_nom as isref, a.lb_nom, count(id_obs) as observations, a.cd_ref, a.nom_valide
					from ancetres a
					left join saisie.saisie_observation o
					using (cd_nom)
					where lower(lb_nom) like lower(:q) or lower(nom_valide) like lower(:q)
					group by a.cd_nom, a.cd_ref, a.lb_nom, a.nom_valide
					order by isref desc, lb_nom asc
				) as childs
    		</query>
    	</raw-sql>
    </entity>
</entity-mappings>